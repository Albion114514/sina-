#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
auto_pipeline_fixed.py
‰øÆÂ§çÁâàÊú¨ - ÊîπËøõÁî®Êà∑ÁïåÈù¢ÔºåÊõ¥Ê∏ÖÊô∞ÁöÑÂºÄÂ±ÄÈÄâÈ°π
"""

import os
import sys
import json
import time
import csv
import shutil
import subprocess
from pathlib import Path
from uuid import uuid4
from datetime import datetime
from typing import Optional, List, Tuple

# ---------- Constants ----------
TRAIN_OUTPUT_DIR = "train_output"
TEST_OUTPUT_DIR = "test_output"

WEIBO_TO_CSV_SCRIPT_CANDIDATES = ["weibo_to_csv.py"]
CRAWLER_SCRIPT_CANDIDATES = [
    "weibo_mobile_crawler_main.py",
    "weibo_crawler_2_1_main.py",
    "weibo_crawler_main.py",
]
ALGO_SCRIPT_CANDIDATES = ["rumor_detect.py"]

CONFIG_PATH = "config.json"


# ---------- Utilities ----------

def ensure_module_or_none(modname: str):
    """Try to import a module; if missing, return None."""
    try:
        return __import__(modname)
    except Exception:
        return None


settings = ensure_module_or_none("settings")


def load_config(path: str = CONFIG_PATH) -> dict:
    """Load config.json; if not present, raise clear error."""
    if settings and hasattr(settings, "load_config"):
        return settings.load_config(path)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def build_sqlalchemy_uri(cfg: dict) -> str:
    """Return a SQLAlchemy URI built from cfg['mysql_config'] (fallback if settings absent)."""
    if settings and hasattr(settings, "build_sqlalchemy_uri"):
        return settings.build_sqlalchemy_uri(cfg)
    mc = cfg["mysql_config"].copy()
    user = mc.get("user", "root")
    pwd = mc.get("password", "")
    host = mc.get("host", "localhost")
    port = int(mc.get("port", 3306))
    db = mc.get("database", "")
    return f"mysql+pymysql://{user}:{pwd}@{host}:{port}/{db}?charset=utf8mb4"


def run_subprocess(cmd: List[str], cwd: Optional[str] = None) -> Tuple[int, str, str]:
    """Run a subprocess and return (returncode, stdout, stderr)."""
    try:
        p = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore',
            cwd=cwd
        )
        return p.returncode, p.stdout, p.stderr
    except UnicodeDecodeError:
        # Â¶ÇÊûúutf-8Â§±Ë¥•ÔºåÂ∞ùËØïÂÖ∂‰ªñÁºñÁ†Å
        p = subprocess.run(
            cmd,
            capture_output=True,
            cwd=cwd
        )
        stdout = p.stdout.decode('utf-8', errors='ignore')
        stderr = p.stderr.decode('utf-8', errors='ignore')
        return p.returncode, stdout, stderr


def pick_existing(paths: List[str]) -> Optional[str]:
    """Return the first existing path from candidates."""
    for p in paths:
        if Path(p).exists():
            return p
    return None


def slugify(text: str, max_len: int = 32) -> str:
    """Safe slug from text for filesystem names."""
    safe = "".join(ch if ch.isalnum() else "_" for ch in text.strip())
    if not safe:
        safe = "topic"
    return safe[:max_len].strip("_")


def print_header(title: str):
    """ÊâìÂç∞ÁæéËßÇÁöÑÊ†áÈ¢ò"""
    print("\n" + "=" * 60)
    print(f"üìã {title}")
    print("=" * 60)


def print_step(step_num: int, description: str):
    """ÊâìÂç∞Ê≠•È™§‰ø°ÊÅØ"""
    print(f"\nüîπ Ê≠•È™§ {step_num}: {description}")


def print_success(message: str):
    """ÊâìÂç∞ÊàêÂäü‰ø°ÊÅØ"""
    print(f"‚úÖ {message}")


def print_warning(message: str):
    """ÊâìÂç∞Ë≠¶Âëä‰ø°ÊÅØ"""
    print(f"‚ö†Ô∏è {message}")


def print_error(message: str):
    """ÊâìÂç∞ÈîôËØØ‰ø°ÊÅØ"""
    print(f"‚ùå {message}")


def print_info(message: str):
    """ÊâìÂç∞‰∏ÄËà¨‰ø°ÊÅØ"""
    print(f"‚ÑπÔ∏è {message}")


# ---------- DB Helpers (pymysql) ----------

def get_db_conn(cfg: dict):
    import pymysql
    mc = cfg["mysql_config"].copy()
    mc.setdefault("charset", "utf8mb4")
    mc["port"] = int(mc.get("port", 3306))
    return pymysql.connect(**mc)


def bootstrap_schema_if_possible():
    """Run db_bootstrap.py --mode init if it exists; else no-op."""
    if Path("db_bootstrap.py").exists():
        print_step(1, "ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ")
        rc, out, err = run_subprocess([sys.executable, "db_bootstrap.py", "--mode", "init"])
        if rc != 0:
            print_warning("Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥• (ÁªßÁª≠ÊâßË°å):")
            print(err or out)


def recreate_database_tables(cfg: dict) -> bool:
    """ÈáçÊñ∞ÂàõÂª∫ÊâÄÊúâÊï∞ÊçÆÂ∫ìË°®"""
    try:
        # Â∞ùËØï‰ΩøÁî®Áé∞ÊúâÁöÑ‰øÆÂ§çËÑöÊú¨
        if Path("db_setup_fixed.py").exists():
            print_info("‰ΩøÁî® db_setup_fixed.py ÈáçÂª∫Ë°®...")
            rc, out, err = run_subprocess([sys.executable, "db_setup_fixed.py"])
            if rc == 0:
                print_success("Ë°®ÈáçÂª∫ÊàêÂäü")
                return True
            else:
                print_error("Ë°®ÈáçÂª∫Â§±Ë¥•")
                return False
        elif Path("db_setup2_0.py").exists():
            print_info("‰ΩøÁî® db_setup2_0.py ÈáçÂª∫Ë°®...")
            rc, out, err = run_subprocess([sys.executable, "db_setup2_0.py"])
            if rc == 0:
                print_success("Ë°®ÈáçÂª∫ÊàêÂäü")
                return True
            else:
                print_error("Ë°®ÈáçÂª∫Â§±Ë¥•")
                return False
        else:
            print_warning("Êú™ÊâæÂà∞Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñËÑöÊú¨Ôºå‰ΩøÁî®ÂÜÖÁΩÆÊñπÊ≥ïÈáçÂª∫...")
            return recreate_tables_manual(cfg)
    except Exception as e:
        print_error(f"Ë°®ÈáçÂª∫Â§±Ë¥•: {e}")
        return False


def recreate_tables_manual(cfg: dict) -> bool:
    """ÊâãÂä®ÈáçÂª∫Ë°®ÁªìÊûÑ"""
    try:
        conn = get_db_conn(cfg)
        cursor = conn.cursor()

        print_info("Âà†Èô§Â§ñÈîÆÁ∫¶Êùü...")
        cursor.execute("""
            SELECT CONSTRAINT_NAME, TABLE_NAME 
            FROM information_schema.KEY_COLUMN_USAGE 
            WHERE TABLE_SCHEMA = %s 
            AND REFERENCED_TABLE_NAME IS NOT NULL
        """, (cfg['mysql_config']['database'],))

        foreign_keys = cursor.fetchall()
        for fk_name, table_name in foreign_keys:
            try:
                cursor.execute(f"ALTER TABLE {table_name} DROP FOREIGN KEY {fk_name}")
                print_success(f"Âà†Èô§Â§ñÈîÆ: {table_name}.{fk_name}")
            except Exception as e:
                print_warning(f"Âà†Èô§Â§ñÈîÆÂ§±Ë¥• {table_name}.{fk_name}: {e}")

        # Âà†Èô§Ë°®ÔºàÊåâ‰æùËµñÈ°∫Â∫èÔºâ
        tables_to_drop = [
            'topic_keywords', 'prediction_results', 'comments',
            'weibo_data', 'crawl_log', 'keywords', 'topics'
        ]

        for table in tables_to_drop:
            try:
                cursor.execute(f"DROP TABLE IF EXISTS {table}")
                print_success(f"Âà†Èô§Ë°®: {table}")
            except Exception as e:
                print_warning(f"Âà†Èô§Ë°®Â§±Ë¥• {table}: {e}")

        print_info("ÂàõÂª∫Êñ∞Ë°®...")
        # ÂàõÂª∫ÂÖ≥ÈîÆÂ≠óË°®
        cursor.execute("""
            CREATE TABLE keywords (
                id INT AUTO_INCREMENT PRIMARY KEY,
                keyword VARCHAR(255) NOT NULL UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_keyword (keyword)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)
        print_success("ÂàõÂª∫ÂÖ≥ÈîÆÂ≠óË°®")

        # ÂàõÂª∫ÂæÆÂçöÊï∞ÊçÆË°®
        cursor.execute("""
            CREATE TABLE weibo_data (
                id VARCHAR(50) PRIMARY KEY,
                keyword_id INT NOT NULL,
                text TEXT NOT NULL,
                pics TEXT,
                timestamp BIGINT NOT NULL,
                source VARCHAR(100) DEFAULT 'Êñ∞Êµ™ÂæÆÂçöÁßªÂä®Á´Ø',
                user_name VARCHAR(255) DEFAULT '',
                reposts_count INT DEFAULT 0,
                comments_count INT DEFAULT 0,
                attitudes_count INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_timestamp (timestamp),
                INDEX idx_keyword_id (keyword_id),
                FOREIGN KEY (keyword_id) REFERENCES keywords(id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)
        print_success("ÂàõÂª∫ÂæÆÂçöÊï∞ÊçÆË°®")

        # Âú® recreate_tables_manual() Èáå„ÄÅÂàõÂª∫ weibo_data ‰πãÂêéÔºåÁªßÁª≠Âä†‰∏äÔºö

        # comments
        cursor.execute("""
            CREATE TABLE comments (
                id VARCHAR(50) PRIMARY KEY,
                weibo_id VARCHAR(50) NOT NULL,
                user VARCHAR(100),
                content TEXT NOT NULL,
                timestamp BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_weibo_id (weibo_id),
                FOREIGN KEY (weibo_id) REFERENCES weibo_data(id)
                    ON DELETE CASCADE ON UPDATE RESTRICT
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)

        # crawl_log
        cursor.execute("""
            CREATE TABLE crawl_log (
                id INT AUTO_INCREMENT PRIMARY KEY,
                keyword VARCHAR(255) NOT NULL,
                page_num INT NOT NULL,
                crawl_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                success_count INT DEFAULT 0,
                error_message TEXT,
                INDEX idx_keyword (keyword)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)

        # topics
        cursor.execute("""
            CREATE TABLE topics (
                id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                mode ENUM('train','test') NOT NULL,
                rumor_type TINYINT,
                UNIQUE KEY uk_title (title)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)

        # topic_keywords
        cursor.execute("""
            CREATE TABLE topic_keywords (
                id INT AUTO_INCREMENT PRIMARY KEY,
                topic_id INT NOT NULL,
                keyword_id INT NOT NULL,
                UNIQUE KEY uk_topic_keyword (topic_id, keyword_id),
                FOREIGN KEY (topic_id) REFERENCES topics(id) ON DELETE CASCADE,
                FOREIGN KEY (keyword_id) REFERENCES keywords(id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)

        # prediction_results
        cursor.execute("""
            CREATE TABLE prediction_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                topic_id INT NOT NULL,
                prediction TEXT NOT NULL,
                accuracy FLOAT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE KEY uk_topic (topic_id),
                FOREIGN KEY (topic_id) REFERENCES topics(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
        """)

        # ÊèíÂÖ•ÈªòËÆ§ÂÖ≥ÈîÆÂ≠ó
        keywords = cfg.get('keywords', [])
        for keyword in keywords:
            cursor.execute("INSERT IGNORE INTO keywords (keyword) VALUES (%s)", (keyword,))
        print_success(f"ÊèíÂÖ• {len(keywords)} ‰∏™ÂÖ≥ÈîÆÂ≠ó")

        conn.commit()
        conn.close()
        return True

    except Exception as e:
        print_error(f"ÊâãÂä®ÈáçÂª∫Ë°®Â§±Ë¥•: {e}")
        return False


# ---------- Core Steps ----------

def get_user_choices(cfg: dict):
    """Ëé∑ÂèñÁî®Êà∑ÁöÑÊâÄÊúâÈÄâÊã©"""
    print_header("ÂæÆÂçöË∞£Ë®ÄÊ£ÄÊµãËá™Âä®ÂåñÁ≥ªÁªü")
    print("Ê¨¢Ëøé‰ΩøÁî®Ëá™Âä®ÂåñÊµÅÁ®ãÔºÅËØ∑ÊåâÁÖß‰ª•‰∏ãÊ≠•È™§ËøõË°åÈÖçÁΩÆÔºö")

    # Ê≠•È™§1: Êï∞ÊçÆÂ∫ìË°®ÈáçÂª∫ÈÄâÊã©
    print_step(1, "Êï∞ÊçÆÂ∫ìË°®ÈÖçÁΩÆ")
    print("ÂΩìÂâçÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅÔºö")
    print("  - Â¶ÇÊûúÈ¶ñÊ¨°ËøêË°åÊàñÈúÄË¶ÅÈáçÁΩÆÊï∞ÊçÆÔºåËØ∑ÈÄâÊã©ÈáçÂª∫")
    print("  - Â¶ÇÊûúÂ∑≤ÊúâÊï∞ÊçÆÂπ∂Â∏åÊúõ‰øùÁïôÔºåËØ∑ÈÄâÊã©‰ΩøÁî®Áé∞ÊúâË°®")

    recreate_choice = None
    while recreate_choice not in ("y", "n", "Y", "N"):
        recreate_choice = input("ÊòØÂê¶ÈáçÊñ∞ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®Ôºü(y/n): ").strip().lower()

    # Ê≠•È™§2: ÂÖ≥ÈîÆÂ≠óÁ°ÆËÆ§
    print_step(2, "ÂÖ≥ÈîÆÂ≠óÈÖçÁΩÆ")
    current_keywords = cfg.get('keywords', [])
    print(f"ÂΩìÂâçÈÖçÁΩÆÁöÑÂÖ≥ÈîÆÂ≠ó: {current_keywords}")
    print("Ëøô‰∫õÂÖ≥ÈîÆÂ≠óÂ∞ÜÁî®‰∫éÂæÆÂçöÊêúÁ¥¢")

    keyword_choice = None
    while keyword_choice not in ("y", "n", "Y", "N"):
        keyword_choice = input("Á°ÆËÆ§‰ΩøÁî®Ëøô‰∫õÂÖ≥ÈîÆÂ≠óÔºü(y/n): ").strip().lower()

    if keyword_choice != "y":
        print("ËØ∑‰øÆÊîπ config.json Êñá‰ª∂‰∏≠ÁöÑ keywords ÈÖçÁΩÆÂêéÈáçÊñ∞ËøêË°åÁ®ãÂ∫è„ÄÇ")
        sys.exit(1)

    # Ê≠•È™§3: Ê®°ÂºèÈÄâÊã©
    print_step(3, "ËøêË°åÊ®°ÂºèÈÄâÊã©")
    print("ËØ∑ÈÄâÊã©ËøêË°åÊ®°ÂºèÔºö")
    print("  - ËÆ≠ÁªÉÊ®°Âºè (1): Áî®‰∫éËÆ≠ÁªÉÊ®°ÂûãÔºåÈúÄË¶ÅÊåáÂÆöÂÜÖÂÆπÁ±ªÂûã")
    print("  - ÊµãËØïÊ®°Âºè (2): Áî®‰∫éÊµãËØïÊ®°ÂûãÔºå‰∏çÈúÄË¶ÅÊåáÂÆöÂÜÖÂÆπÁ±ªÂûã")

    mode = None
    while mode not in ("1", "2"):
        mode = input("ËØ∑ÈÄâÊã©Ê®°Âºè (1:ËÆ≠ÁªÉ, 2:ÊµãËØï): ").strip()
    mode = "train" if mode == "1" else "test"

    # Ê≠•È™§4: Â¶ÇÊûúÊòØËÆ≠ÁªÉÊ®°ÂºèÔºåÈÄâÊã©ÂÜÖÂÆπÁ±ªÂûã
    rumor_type = None
    if mode == "train":
        print_step(4, "ËÆ≠ÁªÉÂÜÖÂÆπÁ±ªÂûãÈÄâÊã©")
        print("ËØ∑ÈÄâÊã©ËÆ≠ÁªÉÊï∞ÊçÆÁöÑÁ±ªÂûãÔºö")
        print("  - Ë∞£Ë®Ä (1): Ê†áËÆ∞‰∏∫Ë∞£Ë®ÄÁöÑÊï∞ÊçÆ")
        print("  - ÈùûË∞£Ë®Ä (2): Ê†áËÆ∞‰∏∫ÈùûË∞£Ë®ÄÁöÑÊï∞ÊçÆ")

        rt = None
        while rt not in ("1", "2"):
            rt = input("ËØ∑ÈÄâÊã©ÂÜÖÂÆπÁ±ªÂûã (1:Ë∞£Ë®Ä, 2:ÈùûË∞£Ë®Ä): ").strip()
        rumor_type = int(rt)

    # Ê≠•È™§5: ËæìÂÖ•Â§ßÊ†áÈ¢ò
    print_step(5, "‰∏ªÈ¢òÂëΩÂêç")
    print("ËØ∑ËæìÂÖ•Êú¨Ê¨°‰ªªÂä°ÁöÑÂ§ßÊ†áÈ¢òÔºö")
    print("  - ËøôÂ∞ÜÁî®‰∫éÂàõÂª∫ËæìÂá∫ÁõÆÂΩïÂíåÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï")
    print("  - Âª∫ËÆÆ‰ΩøÁî®ÊúâÊÑè‰πâÁöÑÂêçÁß∞ÔºåÂ¶Ç'Á∫¢ÂÜõÂüéÂ§ßÊç∑Ë∞£Ë®ÄÊ£ÄÊµã'")

    topic_title = ""
    while not topic_title.strip():
        topic_title = input("ËØ∑ËæìÂÖ•Â§ßÊ†áÈ¢ò: ").strip()
        if not topic_title.strip():
            print_warning("Â§ßÊ†áÈ¢ò‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•")

    return {
        'recreate_tables': recreate_choice == 'y',
        'keywords_confirmed': keyword_choice == 'y',
        'mode': mode,
        'rumor_type': rumor_type,
        'topic_title': topic_title,
        'keywords': current_keywords
    }


def ensure_keywords(cur, keywords: List[str]) -> List[int]:
    """Ensure keywords exist; return their IDs in order."""
    ids: List[int] = []
    for k in keywords:
        cur.execute("SELECT id FROM keywords WHERE keyword=%s", (k,))
        row = cur.fetchone()
        if row:
            ids.append(int(row[0]))
        else:
            cur.execute("INSERT INTO keywords (keyword) VALUES (%s)", (k,))
            ids.append(int(cur.lastrowid))
    return ids


def save_topic_and_link_keywords(conn, title: str, mode: str, rumor_type: Optional[int], kw_list: List[str]) -> int:
    """Insert or update topic, link to keywords in topic_keywords; return topic_id."""
    with conn.cursor() as cur:
        # upsert topic
        cur.execute(
            """
            INSERT INTO topics (title, mode, rumor_type)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE mode=VALUES(mode), rumor_type=VALUES(rumor_type)
            """,
            (title, mode, rumor_type),
        )
        if cur.lastrowid:
            topic_id = int(cur.lastrowid)
        else:
            cur.execute("SELECT id FROM topics WHERE title=%s", (title,))
            topic_id = int(cur.fetchone()[0])

        # ensure keywords and link
        kw_ids = ensure_keywords(cur, kw_list)
        for kid in kw_ids:
            cur.execute(
                """
                INSERT IGNORE INTO topic_keywords (topic_id, keyword_id)
                VALUES (%s, %s)
                """,
                (topic_id, kid),
            )
    conn.commit()
    return topic_id


def run_crawler():
    """Run the crawler script (pick the first that exists)."""
    crawler = pick_existing(CRAWLER_SCRIPT_CANDIDATES)
    if not crawler:
        print_warning("Êú™ÊâæÂà∞Áà¨Ëô´ËÑöÊú¨ÔºåËØ∑Â∞ÜÁà¨Ëô´ËÑöÊú¨ÂëΩÂêç‰∏∫‰ª•‰∏ã‰πã‰∏ÄÂπ∂ÊîæÂú®ÂΩìÂâçÁõÆÂΩïÔºö")
        for c in CRAWLER_SCRIPT_CANDIDATES:
            print("  -", c)
        return False

    print_step(6, "ËøêË°åÂæÆÂçöÁà¨Ëô´")
    print_info(f"‰ΩøÁî®Áà¨Ëô´ËÑöÊú¨: {crawler}")
    rc, out, err = run_subprocess([sys.executable, crawler])

    if rc != 0:
        print_error("Áà¨Ëô´ËøêË°åÂ§±Ë¥•Ôºö")
        print(err or out)
        return False

    print_success("Áà¨Ëô´ËøêË°åÂÆåÊàê")
    print(out)
    return True


def create_unique_output_dir(mode: str, topic_title: str) -> Path:
    base = TRAIN_OUTPUT_DIR if mode == "train" else TEST_OUTPUT_DIR
    Path(base).mkdir(exist_ok=True)
    stamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    slug = slugify(topic_title, max_len=24)
    unique = f"{stamp}_{slug}_{uuid4().hex[:6]}"
    outdir = Path(base) / unique
    outdir.mkdir(parents=True, exist_ok=False)
    print_success(f"ËæìÂá∫ÁõÆÂΩï: {outdir}")
    return outdir


def run_weibo_to_csv(outdir: Path) -> bool:
    """Run weibo_to_csv export into outdir; expects script exists."""
    tool = pick_existing(WEIBO_TO_CSV_SCRIPT_CANDIDATES)
    if not tool:
        print_warning("Êú™ÊâæÂà∞ weibo_to_csv.pyÔºåËØ∑Â∞ÜËÑöÊú¨ÊîæÂú®ÂΩìÂâçÁõÆÂΩï")
        return False

    print_step(7, "ÂØºÂá∫Êï∞ÊçÆÂà∞CSV")
    print_info(f"‰ΩøÁî®ÂØºÂá∫ËÑöÊú¨: {tool}")
    rc, out, err = run_subprocess([sys.executable, tool, "--output", str(outdir)])

    if rc != 0:
        print_error("ÂØºÂá∫Â§±Ë¥•Ôºö")
        print(err or out)
        return False

    print_success("Êï∞ÊçÆÂØºÂá∫ÂÆåÊàê")
    print(out)
    return True


def run_algorithm(mode: str, rumor_type: Optional[int], outdir: Path) -> Tuple[bool, Optional[float]]:
    """
    Run algorithm component on generated CSVs.
    Expected inputs:
      - weibo_data_format.csv
      - comments_format.csv
    Output:
      - prediction_result.csv
    Return (ok, accuracy) where accuracy can be None if not found.
    """
    algo = pick_existing(ALGO_SCRIPT_CANDIDATES)
    if not algo:
        print_warning("Êú™ÊâæÂà∞ÁÆóÊ≥ïËÑöÊú¨ rumor_detect.pyÔºõÂ∞ÜË∑≥ËøáÁÆóÊ≥ïÊ≠•È™§„ÄÇ")
        return False, None

    content = outdir / "weibo_data_format.csv"
    comments = outdir / "comments_format.csv"
    output = outdir / "prediction_result.csv"

    if not content.exists() or not comments.exists():
        print_warning("ÁÆóÊ≥ïËæìÂÖ• CSV Áº∫Â§±ÔºöÈúÄË¶Å weibo_data_format.csv Âíå comments_format.csv")
        return False, None

    cmd = [
        sys.executable, str(algo),
        "--content", str(content),
        "--comments", str(comments),
        "--output", str(output),
        "--mode", "train" if mode == "train" else "test"
    ]
    if mode == "train" and rumor_type in (1, 2):
        cmd.extend(["--label", str(rumor_type)])

    print_step(8, "ËøêË°åË∞£Ë®ÄÊ£ÄÊµãÁÆóÊ≥ï")
    print_info("ËøêË°åÂëΩ‰ª§: " + " ".join(cmd))
    rc, out, err = run_subprocess(cmd)

    if rc != 0:
        print_error("ÁÆóÊ≥ïËøêË°åÂ§±Ë¥•Ôºö")
        print(err or out)
        return False, None

    # Try parse accuracy from stdout (e.g., "Accuracy: 0.89")
    acc = None
    for line in (out or "").splitlines():
        if "Accuracy" in line:
            try:
                acc = float(line.split(":")[-1].strip())
            except Exception:
                pass

    print_success("ÁÆóÊ≥ïËøêË°åÂÆåÊàê")
    print(out)
    return True, acc


def save_prediction(conn, topic_id: int, outdir: Path, accuracy: Optional[float]) -> bool:
    """Read prediction_result.csv content and store into prediction_results table (1:1 topic)."""
    pred_path = outdir / "prediction_result.csv"
    if not pred_path.exists():
        print_warning("Êâæ‰∏çÂà∞ prediction_result.csvÔºåÂÜôÂ∫ìÂ∞ÜË∑≥Ëøá")
        return False

    content = pred_path.read_text(encoding="utf-8", errors="ignore")

    with conn.cursor() as cur:
        cur.execute(
            """
            INSERT INTO prediction_results (topic_id, prediction, accuracy)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE
                prediction=VALUES(prediction),
                accuracy=VALUES(accuracy)
            """,
            (topic_id, content, accuracy),
        )
    return True


def write_topic_info_csv(conn, topic_id: int, outdir: Path) -> None:
    """Write topic_info.csv with topic + prediction join into outdir."""
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT t.title, t.mode, t.rumor_type, p.prediction, p.accuracy, t.created_at
            FROM topics t
            LEFT JOIN prediction_results p ON t.id = p.topic_id
            WHERE t.id = %s
            """,
            (topic_id,),
        )
        row = cur.fetchone()

    csv_path = outdir / "topic_info.csv"
    with open(csv_path, "w", encoding="utf-8-sig", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["title", "mode", "rumor_type", "prediction", "accuracy", "created_at"])
        if row:
            writer.writerow(row)


def main():
    # Âä†ËΩΩÈÖçÁΩÆ
    cfg = load_config()

    # Ëé∑ÂèñÁî®Êà∑ÈÄâÊã©
    choices = get_user_choices(cfg)

    # Êï∞ÊçÆÂ∫ìË°®Â§ÑÁêÜ
    if choices['recreate_tables']:
        print_info("ÈáçÊñ∞ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®...")
        if recreate_database_tables(cfg):
            print_success("Êï∞ÊçÆÂ∫ìË°®ÈáçÂª∫ÂÆåÊàê")
        else:
            print_error("Êï∞ÊçÆÂ∫ìË°®ÈáçÂª∫Â§±Ë¥•ÔºåÁªßÁª≠‰ΩøÁî®Áé∞ÊúâË°®")
    else:
        print_info("‰ΩøÁî®Áé∞ÊúâÊï∞ÊçÆÂ∫ìË°®")
        bootstrap_schema_if_possible()

    # Êï∞ÊçÆÂ∫ìËøûÊé•
    conn = get_db_conn(cfg)
    try:
        # ‰øùÂ≠ò‰∏ªÈ¢òÂíåÂÖ≥ËÅîÂÖ≥ÈîÆÂ≠ó
        print_step(9, "‰øùÂ≠ò‰∏ªÈ¢ò‰ø°ÊÅØÂà∞Êï∞ÊçÆÂ∫ì")
        topic_id = save_topic_and_link_keywords(
            conn,
            choices['topic_title'],
            choices['mode'],
            choices['rumor_type'],
            choices['keywords']
        )
        print_success(f"‰∏ªÈ¢ò‰øùÂ≠òÊàêÂäüÔºåID: {topic_id}")

        # ËøêË°åÁà¨Ëô´
        if not run_crawler():
            yn = input("Áà¨Ëô´ËøêË°åÂ§±Ë¥•ÔºåÊòØÂê¶ÁªßÁª≠ÂêéÁª≠Ê≠•È™§? (y/n): ").strip().lower()
            if yn != "y":
                sys.exit(1)

        # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
        outdir = create_unique_output_dir(choices['mode'], choices['topic_title'])

        # ÂØºÂá∫CSV
        if not run_weibo_to_csv(outdir):
            yn = input("ÂØºÂá∫Â§±Ë¥•ÔºåÊòØÂê¶ÁªßÁª≠ÁÆóÊ≥ïÊ≠•È™§? (y/n): ").strip().lower()
            if yn != "y":
                sys.exit(1)

        # ËøêË°åÁÆóÊ≥ï
        ok_algo, acc = run_algorithm(choices['mode'], choices['rumor_type'], outdir)
        if not ok_algo:
            print_warning("ÁÆóÊ≥ïÊú™ÊàêÂäüÊâßË°åÔºåÊï∞ÊçÆÂ∫ìËÆ∞ÂΩïÂ∞Ü‰∏çÂåÖÂê´È¢ÑÊµãÂÜÖÂÆπ/ÂáÜÁ°ÆÁéá")

        # ‰øùÂ≠òÈ¢ÑÊµãÁªìÊûúÂà∞Êï∞ÊçÆÂ∫ì
        print_step(10, "‰øùÂ≠òÈ¢ÑÊµãÁªìÊûúÂà∞Êï∞ÊçÆÂ∫ì")
        if save_prediction(conn, topic_id, outdir, acc):
            print_success("È¢ÑÊµãÁªìÊûú‰øùÂ≠òÊàêÂäü")
        else:
            print_warning("È¢ÑÊµãÁªìÊûú‰øùÂ≠òÂ§±Ë¥•")

        # ÂÜôÂÖ•topic_info.csv
        print_step(11, "ÁîüÊàê‰∏ªÈ¢ò‰ø°ÊÅØÊñá‰ª∂")
        write_topic_info_csv(conn, topic_id, outdir)
        print_success("‰∏ªÈ¢ò‰ø°ÊÅØÊñá‰ª∂ÁîüÊàêÂÆåÊàê")

        # ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
        print_header("ÊµÅÁ®ãÂÆåÊàê")
        print_success(f"ÊâÄÊúâÊìç‰ΩúÂ∑≤ÂÆåÊàêÔºÅ")
        print(f"üìÅ ËæìÂá∫ÁõÆÂΩï: {outdir}")
        print(f"üîç ‰∏ªÈ¢òÊ†áÈ¢ò: {choices['topic_title']}")
        print(f"üìä ËøêË°åÊ®°Âºè: {choices['mode']}")
        if choices['mode'] == 'train':
            print(f"üè∑Ô∏è  ÂÜÖÂÆπÁ±ªÂûã: {'Ë∞£Ë®Ä' if choices['rumor_type'] == 1 else 'ÈùûË∞£Ë®Ä'}")
        print(f"üîë ‰ΩøÁî®ÂÖ≥ÈîÆÂ≠ó: {', '.join(choices['keywords'])}")
        print("\nüéâ ÊÇ®Áé∞Âú®ÂèØ‰ª•Êü•ÁúãËæìÂá∫ÁõÆÂΩï‰∏≠ÁöÑÁªìÊûúÊñá‰ª∂ÔºÅ")

    except Exception as e:
        print_error(f"ÊµÅÁ®ãÊâßË°åÂá∫Èîô: {e}")
        import traceback
        traceback.print_exc()
    finally:
        conn.close()


if __name__ == "__main__":
    main()