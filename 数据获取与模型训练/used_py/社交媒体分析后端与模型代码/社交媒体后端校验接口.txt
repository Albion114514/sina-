# verification_routes.py
from flask import Blueprint, request, jsonify
from datetime import datetime
from models import db, RumorData, ProcessLog

verification_bp = Blueprint('verification', __name__)

@verification_bp.route('/verify-rumor', methods=['POST'])
def verify_rumor():
    """人工校验谣言"""
    try:
        data = request.json
        data_id = data.get('id')
        nature = data.get('nature')  # 'rumor' or 'non-rumor'
        processor = data.get('processor', 'admin')  # 默认处理人
        
        if not data_id or nature not in ['rumor', 'non-rumor']:
            return jsonify({'error': '参数错误'}), 400
        
        # 更新数据状态
        rumor_data = RumorData.query.get(data_id)
        if not rumor_data:
            return jsonify({'error': '数据不存在'}), 404
        
        # 记录修改前的状态
        old_nature = rumor_data.nature
        
        # 更新数据
        rumor_data.nature = nature
        rumor_data.status = 'processed'
        rumor_data.process_time = datetime.utcnow()
        rumor_data.processor = processor
        
        # 记录操作日志
        log = ProcessLog(
            data_id=data_id,
            operation='verify',
            old_nature=old_nature,
            new_nature=nature,
            operator=processor
        )
        
        db.session.add(log)
        db.session.commit()
        
        return jsonify({
            'message': '校验成功',
            'data': rumor_data.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'校验失败: {str(e)}'}), 500

@verification_bp.route('/modify-verification', methods=['POST'])
def modify_verification():
    """修改校验结果"""
    try:
        data = request.json
        data_id = data.get('id')
        new_nature = data.get('nature')
        processor = data.get('processor', 'admin')
        
        rumor_data = RumorData.query.get(data_id)
        if not rumor_data:
            return jsonify({'error': '数据不存在'}), 404
        
        # 记录修改前的状态
        old_nature = rumor_data.nature
        
        # 更新数据
        rumor_data.nature = new_nature
        rumor_data.process_time = datetime.utcnow()
        rumor_data.processor = processor
        
        # 记录操作日志
        log = ProcessLog(
            data_id=data_id,
            operation='modify',
            old_nature=old_nature,
            new_nature=new_nature,
            operator=processor
        )
        
        db.session.add(log)
        db.session.commit()
        
        return jsonify({
            'message': '修改成功',
            'data': rumor_data.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'修改失败: {str(e)}'}), 500

@verification_bp.route('/processed-data', methods=['GET'])
def get_processed_data():
    """获取已处理数据"""
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    # 查询已处理的数据，按处理时间降序排列
    data = RumorData.query.filter_by(status='processed')\
        .order_by(RumorData.process_time.desc())\
        .paginate(page=page, per_page=per_page, error_out=False)
    
    return jsonify({
        'data': [item.to_dict() for item in data.items],
        'total': data.total,
        'page': page,
        'per_page': per_page
    })

@verification_bp.route('/unprocessed-data', methods=['GET'])
def get_unprocessed_data():
    """获取未处理数据"""
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    data = RumorData.query.filter_by(status='unprocessed')\
        .order_by(RumorData.timestamp.desc())\
        .paginate(page=page, per_page=per_page, error_out=False)
    
    return jsonify({
        'data': [item.to_dict() for item in data.items],
        'total': data.total,
        'page': page,
        'per_page': per_page
    })